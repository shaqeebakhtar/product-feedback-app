generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  email            String
  password         String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  feedbacks        Feedback[]
  upvotedFeedbacks UserUpvotes[]

  @@unique([email])
}

model Username {
  id        String   @id @default(uuid())
  username  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username])
}

model Feedback {
  id               String        @id @default(uuid())
  title            String
  tag              String
  details          String        @db.Text
  upvotes          Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  numberOfComments Int           @default(0)
  creator          User          @relation(fields: [creatorId], references: [id])
  creatorId        String
  comments         Comment[]
  upvotedBy        UserUpvotes[]
}

model Comment {
  id         String   @id @default(uuid())
  text       String   @db.Text
  creatorId  String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
  replies    Reply[]
}

model Reply {
  id        String   @id @default(uuid())
  creatorId String
  repliedTo String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
}

model UserUpvotes {
  id         String   @id @default(uuid())
  userId     String
  feedbackId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  feedback   Feedback @relation(fields: [feedbackId], references: [id])

  @@unique([userId, feedbackId])
}
